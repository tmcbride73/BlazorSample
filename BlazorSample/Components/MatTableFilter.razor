@using System.Linq 
@typeparam TValue

<p>
    <CascadingValue TValue="List<ColFilter>" Value="@FilterList">
        @ChildContent
    </CascadingValue>
</p>

<p>
    <MatButton Raised="true" OnClick="@FilterUsers">Search with Filters</MatButton>
</p>

@code {

    [Parameter]
    public List<TValue> Items { get; set; }

    public List<TValue> InitialItems = new List<TValue>();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public List<ColFilter> FilterList = new List<ColFilter>();

    [Parameter]
    public EventCallback<List<ColFilter>> FilterListChanged { get; set; }

    [Parameter]
    public EventCallback<List<TValue>> ItemsChanged { get; set; }

    protected override void OnInitialized()
    {
        InitialItems.AddRange(Items);
    }

    private async Task OnFilterListChanged()
    {
        await FilterUsers();
    }

    private async Task FilterUsers()
    {
        bool isFilterEmpty = true;
        List<TValue> testItems = new List<TValue>();
        testItems.AddRange(InitialItems);
        Items.Clear();

        foreach (var filter in FilterList)
        {
            if (filter.Value != null && filter.Value != "")
            {
                isFilterEmpty = false;
                Items.AddRange(from item in testItems
                               where item.GetType().GetProperty(filter.Name).GetValue(item).ToString().ToUpper().Contains(filter.Value.ToUpper())
                               select item);
            }
        }

        Items = Items.Distinct().ToList();

        if (isFilterEmpty)
        {
            Items.AddRange(InitialItems);
        }

        await ItemsChanged.InvokeAsync(Items);
    }
}
